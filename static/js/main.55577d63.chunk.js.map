{"version":3,"sources":["events.js","App.js","registerServiceWorker.js","index.js"],"names":["Date","App","calendarComponentRef","React","createRef","state","calendarWeekends","calendarEvents","title","start","handleDateClick","arg","confirm","dateStr","setState","concat","date","allDay","className","defaultView","firstDay","fixedWeekCount","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","ref","this","weekends","events","dateClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.55577d63.chunk.js","sourcesContent":["export default [\n    {\n        'title': 'All Day Event very long title',\n        'allDay': true,\n        'start': new Date(2020, 3, 0),\n        'end': new Date(2020, 3, 1)\n    },\n    {\n        'title': 'Long Event',\n        'start': new Date(2020, 3, 7),\n        'end': new Date(2020, 3, 10)\n    },\n\n    {\n        'title': 'DTS STARTS',\n        'start': new Date(2020, 2, 13, 0, 0, 0),\n        'end': new Date(2020, 2, 20, 0, 0, 0)\n    },\n\n    {\n        'title': 'DTS ENDS',\n        'start': new Date(2020, 10, 6, 0, 0, 0),\n        'end': new Date(2020, 10, 13, 0, 0, 0)\n    },\n\n    {\n        'title': 'Some Event',\n        'start': new Date(2020, 3, 9, 0, 0, 0),\n        'end': new Date(2020, 3, 9, 0, 0, 0)\n    },\n    {\n        'title': 'Conference',\n        'start': new Date(2020, 3, 11),\n        'end': new Date(2020, 3, 13),\n        desc: 'Big conference for important people'\n    },\n    {\n        'title': 'Meeting',\n        'start': new Date(2020, 3, 12, 10, 30, 0, 0),\n        'end': new Date(2020, 3, 12, 12, 30, 0, 0),\n        desc: 'Pre-meeting meeting, to prepare for the meeting'\n    },\n    {\n        'title': 'Lunch',\n        'start': new Date(2020, 3, 12, 12, 0, 0, 0),\n        'end': new Date(2020, 3, 12, 13, 0, 0, 0),\n        desc: 'Power lunch'\n    },\n    {\n        'title': 'Meeting',\n        'start': new Date(2020, 3, 12, 14, 0, 0, 0),\n        'end': new Date(2020, 3, 12, 15, 0, 0, 0)\n    },\n    {\n        'title': 'Happy Hour',\n        'start': new Date(2020, 3, 12, 17, 0, 0, 0),\n        'end': new Date(2020, 3, 12, 17, 30, 0, 0),\n        desc: 'Most important meal of the day'\n    },\n    {\n        'title': 'Dinner',\n        'start': new Date(2020, 3, 12, 20, 0, 0, 0),\n        'end': new Date(2020, 3, 12, 21, 0, 0, 0)\n    },\n    {\n        'title': 'Birthday Party',\n        'start': new Date(2020, 3, 13, 7, 0, 0),\n        'end': new Date(2020, 3, 13, 10, 30, 0)\n    },\n    {\n        'title': 'Birthday Party 2',\n        'start': new Date(2020, 3, 13, 7, 0, 0),\n        'end': new Date(2020, 3, 13, 10, 30, 0)\n    },\n    {\n        'title': 'Birthday Party 3',\n        'start': new Date(2020, 3, 13, 7, 0, 0),\n        'end': new Date(2020, 3, 13, 10, 30, 0)\n    },\n    {\n        'title': 'Late Night Event',\n        'start': new Date(2020, 3, 17, 19, 30, 0),\n        'end': new Date(2020, 3, 18, 2, 0, 0)\n    },\n    {\n        'title': 'Multi-day Event',\n        'start': new Date(2020, 3, 20, 19, 30, 0),\n        'end': new Date(2020, 3, 22, 2, 0, 0)\n    }\n]\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport events from \"./events\"\n\nimport \"./App.css\";\n\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction' // needed for dayClick\n\n\nexport default class App extends React.Component {\n  calendarComponentRef = React.createRef()\n  state = {\n    calendarWeekends: true,\n    calendarEvents: [\n      {\n        title: 'Event Now',\n        start: new Date()\n      }\n    ]\n  }\n\n    render() {\n        return (\n            <div className='aatc-events-calendar-app'>\n                 <div className='aatc-events-calendar'>\n                    <FullCalendar\n                        defaultView=\"dayGridMonth\"\n                        firstDay={ 1 }\n                        fixedWeekCount={ false }\n                        header={{\n                            left: 'prev,next today',\n                            center: 'title',\n                            right: ''\n                            // right: 'dayGridMonth,timeGridWeek,listWeek'\n                        }}\n                        plugins={[ dayGridPlugin, timeGridPlugin, interactionPlugin ]}\n                        ref={ this.calendarComponentRef }\n                        weekends={ this.state.calendarWeekends }\n                        events={ this.state.calendarEvents }\n                        dateClick={ this.handleDateClick }\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    handleDateClick = (arg) => {\n        // eslint-disable-next-line no-restricted-globals\n        if ( confirm('Would you like to add an event to ' + arg.dateStr + ' ?') ){\n            this.setState({  // add new event data\n                calendarEvents: this.state.calendarEvents.concat({ // creates a new array\n                    title: 'New Event Now',\n                    start: arg.date,\n                    allDay: arg.allDay\n                })\n            })\n        }\n    }\n}\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}